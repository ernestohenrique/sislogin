import { Injectable } from "@angular/core";
import { GoogleAuthProvider } from "@angular/fire/auth";
import { AngularFireAuth } from "@angular/fire/compat/auth";
import { Router } from "@angular/router";
import firebase from "firebase/compat/app";
import "firebase/compat/auth";
import {
  BehaviorSubject,
  catchError,
  from,
  switchMap,
  tap,
  throwError,
} from "rxjs";

/*Declração de contate*/
//declare const gapi: any;

@Injectable({
  providedIn: "root",
})
export class AuthService {
  authState: any;
  user: any;
  error: any;

  userSubject = new BehaviorSubject<any>(null); // ou qualquer valor inicial apropriado
  userService: any;

  //isLoading: boolean = false;
  //private googleAuth: any;

  constructor(private afAuth: AngularFireAuth, private router: Router) {
    //this.initGoogleAuth();
  }

  // Inicializa a biblioteca de autenticação do Google
  /*initGoogleAuth(): void {
    gapi.load("auth2", () => {
      this.googleAuth = gapi.auth2.init({
        client_id:
          "673509130676-3337paq4uiec8ldri7mjite5fimm2gs2.apps.googleusercontent.com", // Substitua pela sua CLIENT_ID do Google
        scope: "profile email",
      });
    });
  }*/

  // Método de login com e-mail e senha
  login(email: string, password: string): Promise<any> {
    //return this.afAuth.signInWithEmailAndPassword(email, password);
    return this.afAuth
      .signInWithEmailAndPassword(email, password)
      .then((result) => {
        const user = result.user;
        if (user) {
          const userData = {
            uid: user.uid,
            email: user.email,
            name: user.displayName || "Usuário sem nome", // Se não houver displayName
          };
          this.userService.setUserSubject(userData); // Armazena os dados do usuário no serviço
          return userData; // Retorna o usuário para o restante da aplicação
        }
      })
      .catch((error) => {
        console.error("Erro ao fazer login:", error);
        throw error;
      });
  }

  async loginWithGoogle() {
    /*try {
      const provider = new GoogleAuthProvider();
      provider.setCustomParameters({ prompt: "select_account" });
      const credential = await this.afAuth.signInWithPopup(provider);
      this.user = credential.user;
      this.setUserSubject(this.user);
      return credential.user;
    } catch (error) {
      this.error = error;
      return error;
    }*/
    return this.afAuth
      .signInWithPopup(new firebase.auth.GoogleAuthProvider())
      .then((result) => {
        const user = result.user;
        if (user) {
          const userData = {
            uid: user.uid,
            email: user.email,
            name: user.displayName, // O Google já fornece o displayName
            photoURL: user.photoURL, // Foto de perfil fornecida pelo Google
          };
          this.userService.setUserSubject(userData); // Armazena os dados do usuário no serviço
          return userData;
        }
      })
      .catch((error) => {
        console.error("Erro ao fazer login com Google:", error);
        throw error;
      });
  }

  setUserSubject(user: any) {
    if (user) {
      const userData = {
        uid: user.uid,
        email: user.email,
        name: user.displayName || user.name || "usuário sem nome", // Pegando o displayName diretamente
      };
      console.log("Saving user to sessionStorage:", userData);
      sessionStorage.setItem("user", JSON.stringify(userData)); // Armazena o usuário simplificado
      this.userSubject.next(userData); // Emite o usuário simplificado
    } else {
      console.warn("No user provided to setUserSubject");
      sessionStorage.removeItem("user");
      this.userSubject.next(null); // Limpa os dados do usuário
    }
  }

  getUserSubject() {
    const user = sessionStorage.getItem("user");
    if (user) {
      console.log("Retrieved user from sessionStorage:", JSON.parse(user));
      this.userSubject.next(JSON.parse(user)); // Atualiza o BehaviorSubject com o usuário armazenado
    } else {
      console.warn("No user found in sessionStorage");
    }
  }
  // Método de logout usando apenas o Firebase
  logout(): void {
    this.afAuth
      .signOut()
      .then(() => {
        console.log("Usuário deslogado do Firebase");
        // Limpar cookies e armazenamento local
        this.clearBrowserData();
        // Deslogar do Google
        // Fazer um reload da página para garantir que as credenciais saiam da memória
        //window.location.reload(); // Recarrega a página

        //window.open("https://accounts.google.com/Logout", "_blank");
        //(window.location.href = "https://accounts.google.com/Logout"), "_blank";
        // Redireciona para a página de login
        //this.router.navigate([""]);
        //setTimeout(() => this.router.navigate([""]), 1000); // Atraso para garantir que o redirecionamento ocorra após o logout
        setTimeout(() => {
          window.close();
          this.router.navigate([""]);
        }, 1000); // Atraso para garantir que o redirecionamento ocorra após o logout}
      })
      .catch((error) => {
        console.error("Erro ao deslogar do Firebase:", error);
      });
  }
  // Função para limpar cookies e armazenamento local
  private clearBrowserData(): void {
    // Limpar cookies
    document.cookie.split(";").forEach((cookie) => {
      const [name] = cookie.split("=");
      document.cookie = `${name}=;expires=Thu, expires=Sun, 31 Dec 2050 23:59:59 GMT; path=/; SameSite=Lax`;
    });

    // Limpar armazenamento local e de sessão
    localStorage.clear();
    sessionStorage.clear();
  }

  // Verifica se o usuário está autenticado
  isAuthenticated() {
    return this.afAuth.authState; // Retorna o estado atual da autenticação
  }

  // Tratamento de erros de autenticação
  public handleAuthError(error: any): string {
    let errorMessage = "Erro ao tentar autenticar.";
    switch (error.code) {
      case "auth/invalid-credential":
        errorMessage =
          "As credenciais de autenticação são inválidas ou expiraram.";
        break;
      case "auth/user-not-found":
        errorMessage = "Usuário não encontrado. Verifique suas credenciais.";
        break;
      case "auth/wrong-password":
        errorMessage = "Senha incorreta. Tente novamente.";
        break;
      case "auth/too-many-requests":
        errorMessage =
          "Muitas tentativas de login. Tente novamente mais tarde.";
        break;
      default:
        errorMessage = "Erro de autenticação: " + error.message;
        break;
    }
    return errorMessage;
  }
}
